name: CI/CD Docker Backend

# Trigger workflow on push to specific branches
on:
  push:
    branches: [ branchtest-backend ]

# Set environment variables for Docker image details
env:
  DOCKER_IMAGE: ghcr.io/hi3jo/backend
  VERSION: ${{ github.sha }}
  NAME: backend_cicd

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up JDK 17 for building the project
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache Gradle packages to speed up the build process
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Build the project with Gradle
      - name: Build with Gradle
        run: ./gradlew clean build

      # Set up Docker Buildx for building multi-platform images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.HI3JO_TOKEN }}

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-go ]

    steps:
      # Log in to GHCR to pull the Docker image
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.HI3JO_TOKEN }}

      # Stop and remove existing container, then run the new one
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          docker run -d --name backend_cicd -p 8080:8080 --restart always ${{ env.DOCKER_IMAGE }}:latest
